webpackJsonp([14],{

/***/ 267:
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__vue_script__ = __webpack_require__(268)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] dev/js/views/dialog/dialog-icon.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(269)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-da952d94/dialog-icon.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },

/***/ 268:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _KsDialog = __webpack_require__(115);
	
	var _KsDialog2 = _interopRequireDefault(_KsDialog);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  data: function data() {
	    return {};
	  },
	
	
	  methods: {
	    cancel: function cancel() {
	      console.log('cancel');
	    },
	    ok: function ok() {
	      console.log('ok');
	    },
	    callDialog: function callDialog() {
	      var m1 = _KsDialog2.default.info('alert1', 'alert', false, {
	        mask: false
	      })();
	      var m2 = _KsDialog2.default.success('alert2', 'alert')();
	      var m3 = _KsDialog2.default.warn('alert3', 'alert', {
	        mask: true
	      })();
	
	      console.log(m1, m2, m3);
	    }
	  }
	};
	// </script>

	/* generated by vue-loader */
	// <template>
	// 	<div>
	//
	//     <div class="playground">
	//       <!--<ks-dialog-entity type="info" @cancel="cancel" @confirm="ok">-->
	//         <!--<span slot="title">测试1 -&#45;&#45; info info</span>-->
	//         <!--<p slot="text" style="margin: 0">-->
	//           <!--infoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfo-->
	//         <!--</p>-->
	//       <!--</ks-dialog-entity>-->
	//
	//       <ks-button @click="callDialog">呼叫对话框</ks-button>
	//     </div>
	//
	// 		<!--&lt;!&ndash; 红色icon弹出框 &ndash;&gt;-->
	// 		<!--<div class="KsDialogIcon-danger" cid="KsDialogIcon">-->
	// 			<!--<div class="_icon-bor"><i class="icon">&#xe60d;</i></div>-->
	// 			<!--<div class="_title">-->
	// 				<!--<h2>标题</h2>-->
	// 			<!--</div>-->
	// 			<!--<div class="_content">-->
	// 				<!--警告信息！警告信息！警告信息！-->
	// 			<!--</div>-->
	// 			<!--<div class="_operation">-->
	// 				<!--<button class="btn-plain-dark">取消</button>-->
	// 				<!--<button class="btn-danger">确定</button>-->
	// 			<!--</div>-->
	// 		<!--</div>-->
	// 		<!--&lt;!&ndash; 青色icon弹出框 &ndash;&gt;-->
	// 		<!--<div class="KsDialogIcon-info" cid="KsDialogIcon">-->
	// 			<!--<div class="_icon-bor"><i class="icon">&#xe61b;</i></div>-->
	// 			<!--<div class="_title">-->
	// 				<!--<h2>标题</h2>-->
	// 			<!--</div>-->
	// 			<!--<div class="_content">-->
	// 				<!--警告信息！警告信息！警告信息！-->
	// 			<!--</div>-->
	// 			<!--<div class="_operation">-->
	// 				<!--<button class="btn-plain-dark">取消</button>-->
	// 				<!--<button class="btn-info">确定</button>-->
	// 			<!--</div>-->
	// 		<!--</div>-->
	// 		<!--<div class="KsDialogIcon-success" cid="KsDialogIcon">-->
	// 			<!--<div class="_icon-bor"><i class="icon">&#xe60b;</i></div>-->
	// 			<!--<div class="_title">-->
	// 				<!--<h2>标题</h2>-->
	// 			<!--</div>-->
	// 			<!--<div class="_content">-->
	// 				<!--警告信息！警告信息！警告信息！-->
	// 			<!--</div>-->
	// 			<!--<div class="_operation">-->
	// 				<!--<button class="btn-plain-dark">取消</button>-->
	// 				<!--<button class="btn-success">确定</button>-->
	// 			<!--</div>-->
	// 		<!--</div>-->
	// 		<!--&lt;!&ndash; 橙色icon弹出框 &ndash;&gt;-->
	// 		<!--<div class="KsDialogIcon-warning" cid="KsDialogIcon">-->
	// 			<!--<div class="_icon-bor"><i class="icon">&#xe60d;</i></div>-->
	// 			<!--<div class="_title">-->
	// 				<!--<h2>标题</h2>-->
	// 			<!--</div>-->
	// 			<!--<div class="_content">-->
	// 				<!--警告信息！警告信息！警告信息！-->
	// 			<!--</div>-->
	// 			<!--<div class="_operation">-->
	// 				<!--<button class="btn-plain-dark">取消</button>-->
	// 				<!--<button class="btn-warning">确定</button>-->
	// 			<!--</div>-->
	// 		<!--</div>-->
	//
	// 		<!--&lt;!&ndash; 绿色icon弹出框 &ndash;&gt;-->
	//
	// 		<div class="table-striped">
	// 			<table class="">
	// 				<thead>
	// 				<tr>
	// 					<th></th>
	// 					<th></th>
	// 				</tr>
	// 				</thead>
	// 				<tbody>
	// 				<tr>
	// 					<td>props:type (type:String)</td><td>不同类型的Dialog </td>
	// 				</tr>
	// 				<tr>
	// 					<td>props:confirmBtnText (type:String)</td><td>确定按钮的文字 默认为取消 </td>
	// 				</tr>
	// 				<tr>
	// 					<td>props:cancelBtnText (type:String)</td><td>取消按钮的文字 默认为取消 </td>
	// 				</tr>
	// 				<tr>
	// 					<td>props:showCancelBtn (type:Boolean)</td><td>是否显示取消按钮 </td>
	// 				</tr>
	// 				<tr>
	// 					<td>@cancel (type:Function)</td><td> 失败回调</td>
	// 				</tr>
	// 				<tr>
	// 					<td>@confirm (type:Function)</td><td> 成功回调</td>
	// 				</tr>
	// 				<tr>
	// 					<td>slot:title (type:String)</td><td>title 部分</td>
	// 				</tr>
	// 				<tr>
	// 					<td>slot:text (type:Boolean)</td><td>text 内容部分 </td>
	// 				</tr>
	// 				</tbody>
	// 			</table>
	// 		</div>
	//
	// <pre>
	//   <code class="html">
	//     &lt;ks-dialog-entity type="info" @cancel="cancel" @confirm="ok"&gt;<br />
	// 	  &lt;span slot="title"&gt;测试1 --- info info&lt;/span&gt;<br />
	//       &lt;p slot="text" style="margin: 0"&gt;<br />
	// 	    infoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfo<br />
	//       &lt;/p&gt;
	//     &lt;/ks-dialog-entity&gt;
	//   </code>
	// </pre>
	//
	// 		<h4>
	// 			以上是通过模板的方式调用可用的参数，如果通过实例化的方式调用不止这些还有更多的参数
	// 		</h4>
	// 		<h5>下面介绍通过实例化来调用 Dialog 的方式</h5>
	// <pre>
	//   <code class="javascript">
	// 	// 创建一个 dialog 实例
	// 	let dialog = this.$KsDialog.create({ container: '.work-container' })
	// 	// 这个里面 create 传入的对象就是 options 什么乱七八糟的 title，text，showCancelBtn，cancelBtnText 都可以丢在里面
	// 	// 另外这个 里面 还可以传入 ksMask 的配置项，应为 dialog 的遮罩是 通过 KSMask 组件实现的
	// 	// container: 就是一个容器吧，然后dialog就是在这个容器中居中
	// 	// fillMode: 是否完全填充否则是区域填充
	// 	// backgroundColor: mask 的颜色
	//
	// 	// 显示添加成功呢
	// 	//            内容       标题      类型
	// 	dialog.show('添加成功!', '信息', 'success')(() => {
	// 	  // 关闭提示框
	// 	  dialog.close()
	// 	})
	//     // show 函数返回的函数 dialog.show()(成功回调， 失败回调)
	//
	//   </code>
	// </pre>
	// 	</div>
	// </template>
	//
	// <script type="label">

/***/ },

/***/ 269:
/***/ function(module, exports) {

	module.exports = "\n\t<div>\n\n    <div class=\"playground\">\n      <!--<ks-dialog-entity type=\"info\" @cancel=\"cancel\" @confirm=\"ok\">-->\n        <!--<span slot=\"title\">测试1 -&#45;&#45; info info</span>-->\n        <!--<p slot=\"text\" style=\"margin: 0\">-->\n          <!--infoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfo-->\n        <!--</p>-->\n      <!--</ks-dialog-entity>-->\n\n      <ks-button @click=\"callDialog\">呼叫对话框</ks-button>\n    </div>\n\n\t\t<!--&lt;!&ndash; 红色icon弹出框 &ndash;&gt;-->\n\t\t<!--<div class=\"KsDialogIcon-danger\" cid=\"KsDialogIcon\">-->\n\t\t\t<!--<div class=\"_icon-bor\"><i class=\"icon\">&#xe60d;</i></div>-->\n\t\t\t<!--<div class=\"_title\">-->\n\t\t\t\t<!--<h2>标题</h2>-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_content\">-->\n\t\t\t\t<!--警告信息！警告信息！警告信息！-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_operation\">-->\n\t\t\t\t<!--<button class=\"btn-plain-dark\">取消</button>-->\n\t\t\t\t<!--<button class=\"btn-danger\">确定</button>-->\n\t\t\t<!--</div>-->\n\t\t<!--</div>-->\n\t\t<!--&lt;!&ndash; 青色icon弹出框 &ndash;&gt;-->\n\t\t<!--<div class=\"KsDialogIcon-info\" cid=\"KsDialogIcon\">-->\n\t\t\t<!--<div class=\"_icon-bor\"><i class=\"icon\">&#xe61b;</i></div>-->\n\t\t\t<!--<div class=\"_title\">-->\n\t\t\t\t<!--<h2>标题</h2>-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_content\">-->\n\t\t\t\t<!--警告信息！警告信息！警告信息！-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_operation\">-->\n\t\t\t\t<!--<button class=\"btn-plain-dark\">取消</button>-->\n\t\t\t\t<!--<button class=\"btn-info\">确定</button>-->\n\t\t\t<!--</div>-->\n\t\t<!--</div>-->\n\t\t<!--<div class=\"KsDialogIcon-success\" cid=\"KsDialogIcon\">-->\n\t\t\t<!--<div class=\"_icon-bor\"><i class=\"icon\">&#xe60b;</i></div>-->\n\t\t\t<!--<div class=\"_title\">-->\n\t\t\t\t<!--<h2>标题</h2>-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_content\">-->\n\t\t\t\t<!--警告信息！警告信息！警告信息！-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_operation\">-->\n\t\t\t\t<!--<button class=\"btn-plain-dark\">取消</button>-->\n\t\t\t\t<!--<button class=\"btn-success\">确定</button>-->\n\t\t\t<!--</div>-->\n\t\t<!--</div>-->\n\t\t<!--&lt;!&ndash; 橙色icon弹出框 &ndash;&gt;-->\n\t\t<!--<div class=\"KsDialogIcon-warning\" cid=\"KsDialogIcon\">-->\n\t\t\t<!--<div class=\"_icon-bor\"><i class=\"icon\">&#xe60d;</i></div>-->\n\t\t\t<!--<div class=\"_title\">-->\n\t\t\t\t<!--<h2>标题</h2>-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_content\">-->\n\t\t\t\t<!--警告信息！警告信息！警告信息！-->\n\t\t\t<!--</div>-->\n\t\t\t<!--<div class=\"_operation\">-->\n\t\t\t\t<!--<button class=\"btn-plain-dark\">取消</button>-->\n\t\t\t\t<!--<button class=\"btn-warning\">确定</button>-->\n\t\t\t<!--</div>-->\n\t\t<!--</div>-->\n\n\t\t<!--&lt;!&ndash; 绿色icon弹出框 &ndash;&gt;-->\n\n\t\t<div class=\"table-striped\">\n\t\t\t<table class=\"\">\n\t\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th></th>\n\t\t\t\t\t<th></th>\n\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>props:type (type:String)</td><td>不同类型的Dialog </td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>props:confirmBtnText (type:String)</td><td>确定按钮的文字 默认为取消 </td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>props:cancelBtnText (type:String)</td><td>取消按钮的文字 默认为取消 </td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>props:showCancelBtn (type:Boolean)</td><td>是否显示取消按钮 </td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>@cancel (type:Function)</td><td> 失败回调</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>@confirm (type:Function)</td><td> 成功回调</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>slot:title (type:String)</td><td>title 部分</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>slot:text (type:Boolean)</td><td>text 内容部分 </td>\n\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n<pre>\n  <code class=\"html\">\n    &lt;ks-dialog-entity type=\"info\" @cancel=\"cancel\" @confirm=\"ok\"&gt;<br />\n\t  &lt;span slot=\"title\"&gt;测试1 --- info info&lt;/span&gt;<br />\n      &lt;p slot=\"text\" style=\"margin: 0\"&gt;<br />\n\t    infoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfoinfo<br />\n      &lt;/p&gt;\n    &lt;/ks-dialog-entity&gt;\n  </code>\n</pre>\n\n\t\t<h4>\n\t\t\t以上是通过模板的方式调用可用的参数，如果通过实例化的方式调用不止这些还有更多的参数\n\t\t</h4>\n\t\t<h5>下面介绍通过实例化来调用 Dialog 的方式</h5>\n<pre>\n  <code class=\"javascript\">\n\t// 创建一个 dialog 实例\n\tlet dialog = this.$KsDialog.create({ container: '.work-container' })\n\t// 这个里面 create 传入的对象就是 options 什么乱七八糟的 title，text，showCancelBtn，cancelBtnText 都可以丢在里面\n\t// 另外这个 里面 还可以传入 ksMask 的配置项，应为 dialog 的遮罩是 通过 KSMask 组件实现的\n\t// container: 就是一个容器吧，然后dialog就是在这个容器中居中\n\t// fillMode: 是否完全填充否则是区域填充\n\t// backgroundColor: mask 的颜色\n\n\t// 显示添加成功呢\n\t//            内容       标题      类型\n\tdialog.show('添加成功!', '信息', 'success')(() => {\n\t  // 关闭提示框\n\t  dialog.close()\n\t})\n    // show 函数返回的函数 dialog.show()(成功回调， 失败回调)\n\n  </code>\n</pre>\n\t</div>\n";

/***/ }

});
//# sourceMappingURL=14.28922e1b.js.map