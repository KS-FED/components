@charset "UTF-8";

//------------------------------
// Thanks:
// http://bourbon.io/
// https://github.com/thomas-mcdonald/bootstrap-sass/blob/master/vendor/assets/stylesheets/bootstrap/_mixins.scss
// https://github.com/marvin1023/sassCore/blob/master/core/_css3.scss
//------------------------------

$prefixForWebkit:             true !default;
$prefixForMozilla:            true !default;
$prefixForMicrosoft:          true !default;
$prefixForOpera:              false !default; //opera从版本15开始转向webkit，所以默认为false，不输出o前缀
$prefixNo:                    true !default;


// prefixer
// 用于在属性上加前缀
// 默认这里将只输出webkit前缀和标准（如果要开启opera的可以将$prefixForOpera设置为true）
//-----------------------------------------------------
@mixin prefixer($property, $value, $prefixes: o webkit) {
  @each $prefix in $prefixes {
    @if $prefix == webkit and $prefixForWebkit == true {
      -webkit-#{$property}: $value;
    }
    @else if $prefix == moz and $prefixForMozilla == true {
      -moz-#{$property}: $value;
    }
    @else if $prefix == ms and $prefixForMicrosoft == true {
      -ms-#{$property}: $value;
    }
    @else if $prefix == o and $prefixForOpera == true {
      -o-#{$property}: $value;
    }
  }
  @if $prefixNo {
    #{$property}: $value;
  }
}

// prefixer-value
// 用于在值上加前缀
// 默认这里将输出webkit前缀，moz前缀和标准
@mixin prefixer-value($property, $value, $prefixes: webkit moz) {
  @each $prefix in $prefixes {
    @if $prefix == webkit and $prefixForWebkit == true {
      #{$property}: -webkit-#{$value};
    }
    @else if $prefix == moz and $prefixForMozilla == true {
      #{$property}: -moz-#{$value};
    }
    @else if $prefix == o and $prefixForMozilla == true {
      #{$property}: -o-#{$value};
    }
    @else if $prefix == ms and $prefixForMicrosoft == true {
      #{$property}: -ms-#{$value};
    }
  }
  @if $prefixNo {
    #{$property}: $value;
  }
}

// disable prefix
// 设置所有前缀和标准为false，用于@keyframes
@mixin disable-prefix-for-all() {
  $prefixForWebkit:      false !global;
  $prefixForMozilla:     false !global;
  $prefixForMicrosoft:   false !global;
  $prefixForOpera:       false !global;
  $prefixNo:             false !global;
}

// Return vendor-prefixed property names if appropriate
// 将transition-property中的需要加前缀的属性添加相应的前缀，如transform
// transitionPropertyNames((transform, color, background), moz) -> -moz-transform, color, background
//-----------------------------------------------------
@function transitionPropertyName($prop, $vendor: false) {
  // put other properties that need to be prefixed here aswell
  @if $vendor == webkit and $prefixForWebkit == true and $prop == transform {
    @return unquote('-webkit-'+$prop);
  }
  @if $vendor == moz and $prefixForMozilla == true and $prop == transform {
    @return unquote('-moz-'+$prop);
  }
  @if $vendor == o and $prefixForOpera == true and $prop == transform {
    @return unquote('-o-'+$prop);
  }
  @else {
    @return $prop;
  }
}

@function transitionPropertyNames($props, $vendor: false) {
  $new-props: ();
  @each $prop in $props {
    $new-props: append($new-props, transitionPropertyName($prop, $vendor), comma);
  }
  @return $new-props;
}

//Border Radius
//http://www.w3.org/TR/css3-background/#the-border-radius
//http://caniuse.com/#search=border-radius
@mixin border-radius($radius: 3px) {
  border-radius:$radius;
}
// =========================Use=======================
// .border-radius{
//   @include border-radius(5px);
// }
// ==========================Output====================
// .border-radius {
//   border-radius: 5px;
// }
// ===================================================

// border-image
// Value:<‘border-image-source’> || <‘border-image-slice’> [ / <‘border-image-width’> | / <‘border-image-width’>? / <‘border-image-outset’> ]? || <‘border-image-repeat’>
//http://www.w3.org/TR/css3-background/#the-border-image
// http://border-image.com/
@mixin border-image($image){
  @include prefixer(border-image, $image);
}
// ============================Use==============================
// .border-image{
//   @include border-image(url("images/border.png") 20px round);
// }
// ==============================Output===========================
// .border-image {
//   -webkit-border-image: url("images/border.png") 20px round;
//   border-image: url("images/border.png") 20px round;
// }
// ==============================================================

// box-sizing
// $type: border-box | padding-box | content-box
// http://www.w3.org/TR/css3-ui/#box-sizing
// http://caniuse.com/#search=box-sizing
@mixin box-sizing($type: border-box) {
  @include prefixer(box-sizing, $type);
}
// ============================Use===============================
// *{
//   @include box-sizing(border-box);
// }
// ==============================Output============================
// * {
//   -webkit-box-sizing: border-box;
//   box-sizing: border-box;
// }
// ===============================================================

// box-shadow
// Value:none | <shadow> [ , <shadow> ]*
// <shadow> = inset? && <length>{2,4} && <color>?
// http://www.w3.org/TR/css3-background/#box-shadow
// http://caniuse.com/#search=box-shadow
@mixin box-shadow($shadow...) {
  @if length($shadow) >= 1 {
    @include prefixer(box-shadow, $shadow);
  } @else{
    $shadow:0 0 4px rgba(0,0,0,.3);
    @include prefixer(box-shadow, $shadow);
  }
}
@mixin no-box-shadow($noshadow:none){
	@include prefixer(box-shadow,$noshadow);
}
// ===========================Use================================
// .box-shadow{
//   @include box-shadow(inset 1px 1px 3px rgba(234,234,22,.5),1px 1px 3px rgba(33,23,23,.2));
// }
// .no-box-shadow{
//   @include no-box-shadow;
// }
// =============================Output=============================
// .box-shadow {
//   -webkit-box-shadow: inset 1px 1px 3px rgba(234, 234, 22, 0.5), 1px 1px 3px rgba(33, 23, 23, 0.2);
//   box-shadow: inset 1px 1px 3px rgba(234, 234, 22, 0.5), 1px 1px 3px rgba(33, 23, 23, 0.2);
// }
// .no-box-shadow {
//   -webkit-box-shadow: none;
//   box-shadow: none;
// }
// ================================================================


// appearance
// Value:http://css-tricks.com/almanac/properties/a/appearance/
// http://wiki.csswg.org/spec/css4-ui#appearance
// http://caniuse.com/#search=appearance
@mixin appearance($value) {
  @include prefixer(appearance, $value, webkit moz);
}
// =========================Use=================================
// input[type="radio"]{
//   @include appearance(radio);
// }
// ===========================Output==============================
// input[type="radio"] {
//   -webkit-appearance: radio;
//   -moz-appearance: radio;
//   appearance: radio;
// }
// ==============================================================


// hyphens
// Valus:none | manual | auto
// http://www.w3.org/TR/css3-text/#hyphenation
// http://caniuse.com/#search=hyphens
@mixin hyphens($value: auto) {
  @include prefixer(hyphens, $value, webkit moz);
}
// =================================Use================================
// .hyphens {
//   @include hyphens(none);
// }
// ===================================Output=============================
// .hyphens {
//   -webkit-hyphens: none;
//   -moz-hyphens: none;
//   hyphens: none;
// }
// =====================================================================


// User select
// Value: none | text | all | element
// https://developer.mozilla.org/en-US/docs/Web/CSS/user-select
// http://caniuse.com/#search=user-select
@mixin user-select($arg: text) {
  @include prefixer(user-select, $arg,webkit moz ms);
}
// =============================Use================================
// .user-select{
//   @include user-select(element);
// }
// ==============================Output===============================
// .user-select {
//   -webkit-user-select: element;
//   -moz-user-select: element;
//   -ms-user-select: element;
//   user-select: element;
// }
// ================================================================

//Background Image

// background-clip
// Value:border-box | padding-box | content-box
// http://www.w3.org/TR/css3-background/#background-clip
//
@mixin background-clip($clip...) {
  @if length($clip) >= 1 {
    @include prefixer(background-clip, $clip);
  } @else {
    @include prefixer(background-clip, padding-box);
  }
}
// ============================Use=================================
// .background-clip {
//   @include background-clip(padding-box,border-box);
// }
// ==============================Output==============================
// .background-clip {
//   -webkit-background-clip: padding-box, border-box;
//   background-clip: padding-box, border-box;
// }
// =================================================================


// background-origin
// Value:border-box | padding-box | content-box
// http://www.w3.org/TR/css3-background/#background-origin
@mixin background-origin($origin...) {
  @if length($origin) >= 1 {
    @include prefixer(background-origin, $origin);
  } @else {
    @include prefixer(background-origin, border-box);
  }
}
// ==============================Use===============================
// .background-origin{
//   @include background-origin;
// }
// ==============================Output=============================
// .background-origin{
//   @include background-origin;
// }
// ================================================================


// backgroud-size
// Value:  [ <length> | <percentage> | auto ]{1,2} | cover | contain
// http://www.w3.org/TR/css3-background/#background-size

@mixin background-size($size...) {
  @if length($size) >= 1 {
    @include prefixer(background-size, $size);
  } @else {
    @include prefixer(background-size, cover);
  }
}
// =============================Use===================================
// .background-size{
//   @include background-size(10px 20px, 20px 10px, 40px 20px, 20px 40px);
// }
// ===============================Output================================
// .background-size {
//   -webkit-background-size: 10px 20px, 20px 10px, 40px 20px, 20px 40px;
//   background-size: 10px 20px, 20px 10px, 40px 20px, 20px 40px;
// }
// ====================================================================

//Gradient

// Ttransform
// Value: none | <transform-list> (transform-list:http://www.w3.org/TR/css3-transforms/#typedef-transform-function)
// http://www.w3.org/TR/css3-transforms/#transform-property
// http://caniuse.com/#search=transform
@mixin transform($property...) {
  @include prefixer(transform, $property,webkit ms);
}
// ==============================Use====================================
// .transform{
//   @include transform(rotate(3deg) translate(30px) skew(20deg));
// }
// ================================Output=================================
// .transform {
//   -webkit-transform: rotate(3deg) translate(30px) skew(20deg);
//   -ms-transform: rotate(3deg) translate(30px) skew(20deg);
//   transform: rotate(3deg) translate(30px) skew(20deg);
// }
// ======================================================================

// transform-origin
// Value:
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
// http://www.w3.org/TR/css3-transforms/#transform-origin-property

@mixin transform-origin($axes) {
  @include prefixer(transform-origin, $axes,webkit ms);
}
// ==================================Use==================================
// .transform-origin {
//   @include transform-origin(left center);
// }
// ===================================Output===============================
// .transform-origin {
//   -webkit-transform-origin: left center;
//   -ms-transform-origin: left center;
//   transform-origin: left center;
// }
// =======================================================================


// transform-style
// Value:flat | preserve-3d
// http://www.w3.org/TR/css3-transforms/#propdef-transform-style
@mixin transform-style ($style: preserve-3d) {
  @include prefixer(transform-style, $style,webkit ms);
}
// ==================================Use==================================
// .transform-style{
//   @include transform-style;
// }
// ===================================Output================================
// .transform-style {
//   -webkit-transform-style: preserve-3d;
//   -ms-transform-style: preserve-3d;
//   transform-style: preserve-3d;
// }
// ========================================================================

// rotate
// rotate() = rotate( <angle> )
@mixin rotate($degrees) {
  @include prefixer(transform, rotate($degrees),webkit ms);
}
//rotate3d() = rotate3d( <number> , <number> , <number> , <angle> )
@mixin rotate3D($degrees...) {
  @include prefixer(transform, rotate3D($degrees),webkit ms);
}
//rotateX() = rotateX( <angle> )
@mixin rotateX($degrees) {
  @include prefixer(transform, rotateX($degrees),webkit ms);
}
//rotateY() = rotateY( <angle> )
@mixin rotateY($degrees) {
  @include prefixer(transform, rotateY($degrees),webkit ms);
}
//rotateZ() = rotateZ( <angle> )
@mixin rotateZ($degrees) {
  @include prefixer(transform, rotateZ($degrees),webkit ms);
}
// ==================================Use=============================
// .rotate{
//   @include rotate(20deg);
// }
// .rotate3D{
//   @include rotate3D(0,0,1,20deg);
// }
// .rotateX{
//   @inclue rotateX(20deg);
// }
// .rotateY{
//   @include rotateY(20deg);
// }
// .rotateZ{
//   @include rotateZ(20deg);
// }
// ===================================Output==========================
// .rotate {
//   -webkit-transform: rotate(20deg);
//   -ms-transform: rotate(20deg);
//   transform: rotate(20deg);
// }

// .rotate3D {
//   -webkit-transform: rotate3D(0, 0, 1, 20deg);
//   -ms-transform: rotate3D(0, 0, 1, 20deg);
//   transform: rotate3D(0, 0, 1, 20deg);
// }

// .rotateX {
//   @inclue rotateX(20deg);
// }

// .rotateY {
//   -webkit-transform: rotateY(20deg);
//   -ms-transform: rotateY(20deg);
//   transform: rotateY(20deg);
// }

// .rotateZ {
//   -webkit-transform: rotateZ(20deg);
//   -ms-transform: rotateZ(20deg);
//   transform: rotateZ(20deg);
// }
// =====================================================================
// scale

//scale() = scale( <number> [, <number> ]? )
@mixin scale($ratio...) {
  @include prefixer(transform, scale($ratio),webkit ms);
}
//scale3d() = scale3d( <number> , <number>, <number> )
@mixin scale3D($ratio...) {
  @include prefixer(transform, scale3D($ratio),webkit ms);
}
//scaleX() = scaleX( <number> )
@mixin scaleX($ratio) {
  @include prefixer(transform, scaleX($ratio),webkit ms);
}
//scaleY() = scaleY( <number> )
@mixin scaleY($ratio) {
  @include prefixer(transform, scaleY($ratio),webkit ms);
}
//scaleZ() = scaleZ( <number> )
@mixin scaleZ($ratio) {
  @include prefixer(transform, scaleZ($ratio),webkit ms);
}
// =================================Use===================================
// .scale{
//   @include scale(1.2);
// }
// .scale3D {
//   @include scale3D(.5,.8,1.2);
// }
// .scaleX{
//   @include scaleX(2);
// }
// .scaleY{
//   @include scaleY(1.1);
// }
// .scaleZ{
//   @include scaleZ(1.5);
// }
// ================================Output===================================
// .scale {
//   -webkit-transform: scale(1.2);
//   -ms-transform: scale(1.2);
//   transform: scale(1.2);
// }

// .scale3D {
//   -webkit-transform: scale3D(0.5, 0.8, 1.2);
//   -ms-transform: scale3D(0.5, 0.8, 1.2);
//   transform: scale3D(0.5, 0.8, 1.2);
// }

// .scaleX {
//   -webkit-transform: scaleX(2);
//   -ms-transform: scaleX(2);
//   transform: scaleX(2);
// }

// .scaleY {
//   -webkit-transform: scaleY(1.1);
//   -ms-transform: scaleY(1.1);
//   transform: scaleY(1.1);
// }

// .scaleZ {
//   -webkit-transform: scaleZ(1.5);
//   -ms-transform: scaleZ(1.5);
//   transform: scaleZ(1.5);
// }
// =======================================================================
// translate
//translate() = translate( <translation-value> [, <translation-value> ]? )
@mixin translate($px...) {
  @include prefixer(transform, translate($px),webkit ms);
}
//translate3d() = translate3d( <translation-value> , <translation-value> , <length> )
@mixin translate3D($px...) {
  @include prefixer(transform, translate3D($px),webkit ms);
}
//translateX() = translateX( <translation-value> )
@mixin translateX($px) {
  @include prefixer(transform, translateX($px),webkit ms);
}
//translateY() = translateX( <translation-value> )
@mixin translateY($px) {
  @include prefixer(transform, translateY($px),webkit ms);
}
//translateZ() = translateZ( <length> )
@mixin translateZ($px) {
  @include prefixer(transform, translateZ($px),webkit ms);
}
// ==================================Use================================
// .translate{
//   @include translate(100px,200px);
// }
// .translate3D{
//   @include translate3D(100px,200px,30px);
// }
// .translateX{
//   @include translateX(100px);
// }
// .translateY{
//   @include translateY(-20px);
// }
// .translateZ{
//   @include translateZ(10px);
// }
// ==================================Output==============================
// .translate {
//   -webkit-transform: translate(100px, 200px);
//   -ms-transform: translate(100px, 200px);
//   transform: translate(100px, 200px);
// }

// .translate3D {
//   -webkit-transform: translate3D(100px, 200px, 30px);
//   -ms-transform: translate3D(100px, 200px, 30px);
//   transform: translate3D(100px, 200px, 30px);
// }

// .translateX {
//   -webkit-transform: translateX(100px);
//   -ms-transform: translateX(100px);
//   transform: translateX(100px);
// }

// .translateY {
//   -webkit-transform: translateY(-20px);
//   -ms-transform: translateY(-20px);
//   transform: translateY(-20px);
// }

// .translateZ {
//   -webkit-transform: translateZ(10px);
//   -ms-transform: translateZ(10px);
//   transform: translateZ(10px);
// }
// ====================================================================
// skew
// skew时一般会有锯齿什么的，解决方法是添加backface-visibility为hidden
// 详见 https://github.com/twitter/bootstrap/issues/5319　or http://modernweb.com/2014/05/21/fixing-typography-inside-of-css-2-d-transforms/

//skew() = skew( <angle> [, <angle> ]? )
@mixin skew($degrees...) {
  @include prefixer(transform, skew($degrees),webkit ms);
  @include backface-visibility;
}
//skewX() = skewX( <angle> )
@mixin skewX($degrees) {
  @include prefixer(transform, skewX($degrees),webkit ms);
  @include backface-visibility;
}
//skewY() = skewY( <angle> )
@mixin skewY($degrees) {
  @include prefixer(transform, skewY($degrees),webkit ms);
  @include backface-visibility;
}

// background visibility
// Value:visible | hidden
// https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility
// http://www.w3.org/TR/css3-transforms/#backface-visibility-property
@mixin backface-visibility($visibility:hidden){
  @include prefixer(backface-visibility, $visibility);
}

// ===================================Use===============================
// .skew {
//   @include skew(30deg,45deg);
// }
// .skewX{
//   @include skewX(45deg);
// }
// .skewY{
//   @include skewY(-45deg);
// }
// .backface-visibility{
//   @include backface-visibility;
// }
// ==================================Output==============================
// .skew {
//   -webkit-transform: skew(30deg, 45deg);
//   -ms-transform: skew(30deg, 45deg);
//   transform: skew(30deg, 45deg);
//   -webkit-backface-visibility: hidden;
//   backface-visibility: hidden;
// }

// .skewX {
//   -webkit-transform: skewX(45deg);
//   -ms-transform: skewX(45deg);
//   transform: skewX(45deg);
//   -webkit-backface-visibility: hidden;
//   backface-visibility: hidden;
// }

// .skewY {
//   -webkit-transform: skewY(-45deg);
//   -ms-transform: skewY(-45deg);
//   transform: skewY(-45deg);
//   -webkit-backface-visibility: hidden;
//   backface-visibility: hidden;
// }

// .backface-visibility {
//   -webkit-backface-visibility: hidden;
//   backface-visibility: hidden;
// }
// =======================================================================
// matrix
// ...

// perspective
// none | <length>
// http://www.w3.org/TR/css3-transforms/#propdef-perspective
// perspective() = perspective( <length> )
@mixin perspective($depth: none) {
  @include prefixer(perspective, $depth,webkit ms);
}
// ================================Use===========================
// .perspective {
//   @include perspective(300px);
// }
// ================================Output=========================
// .perspective {
//   -webkit-perspective: 300px;
//   -ms-perspective: 300px;
//   perspective: 300px;
// }
// ================================================================

// perspective origin
// Value:   x-axis - left | center | right  | length | %  y-axis - top  | center | bottom | length | %
// http://www.w3.org/TR/css3-transforms/#propdef-perspective-origin
@mixin perspective-origin($value: 50% 50%) {
  @include prefixer(perspective-origin, $value,webkit ms);
}
// ==========================Use====================================
// .perspective-origin {
//   @include perspective-origin;
// }
// ============================Output=================================
// .perspective-origin {
//   -webkit-perspective-origin: 50% 50%;
//   -ms-perspective-origin: 50% 50%;
//   perspective-origin: 50% 50%;
// }
// ==================================================================
// transition
// Value:<single-transition> [ ‘,’ <single-transition> ]* 
//       <single-transition> = [ none | <single-transition-property> ] || <time> || <single-transition-timing-function> || <time>
// http://caniuse.com/#search=transition
// http://www.w3.org/TR/css3-transitions/#transition-shorthand-property
@mixin transition($properties...) {
  @if length($properties) >= 1 {
    @include prefixer(transition, $properties);
  }
  @else {
    $properties: all 0.3s ease;
    @include prefixer(transition, $properties);
  }
}
// ========================Use======================================
// .transition {
//   @include transition(color .2s ease, height .28s ease-in .2s);
// }
// ===========================Output==================================
// .transition {
//   -webkit-transition: color 0.2s ease, height 0.28s ease-in 0.2s;
//   transition: color 0.2s ease, height 0.28s ease-in 0.2s;
// }
// ==================================================================
// transition-property
// Value:	none | <single-transition-property> [ ‘,’ <single-transition-property> ]*
// http://www.w3.org/TR/css3-transitions/#transition-property-property
// 默认不提供moz的，如有需要请自行添加
// -moz-transition-property: transitionPropertyNames($properties, moz);
@mixin transition-property($properties...) {
  -webkit-transition-property: transitionPropertyNames($properties, webkit);
  @if $prefixForOpera {
    -o-transition-property: transitionPropertyNames($properties, o);
  }
  transition-property: transitionPropertyNames($properties, false);
}
// transition-duration
// Value:<time> [, <time>]*
// http://www.w3.org/TR/css3-transitions/#transition-duration
@mixin transition-duration($times...) {
  @include prefixer(transition-duration, $times);
}
// transition-timing-function
// Value: <single-transition-timing-function> [ ‘,’ <single-transition-timing-function> ]*
// <single-transition-timing-function> = ease | linear | ease-in | ease-out | ease-in-out | step-start | step-end | steps(<integer>[, [ start | end ] ]?) | cubic-bezier(<number>, <number>, <number>, <number>)
// http://www.w3.org/TR/css3-transitions/#transition-timing-function
@mixin transition-timing-function($motions...) {
  @include prefixer(transition-timing-function, $motions);
}
// transition-delay
// Value:<time> [, <time>]*
// http://www.w3.org/TR/css3-transitions/#transition-delay
@mixin transition-delay($times...) {
  @include prefixer(transition-delay, $times);
}
// ============================Use===============================
// .transition-all{
//   @include transition-property(width,height,color,transform);
//   @include transition-duration(.2s,.28s,.3s,.2);
//   @include transition-timing-function(ease,ease-in,ease-out,linear);
//   @include transition-delay(.1s,.15s,.2s,.1s);
// }
// =============================Output=============================
// .transition-all {
//   -webkit-transition-property: width, height, color, -webkit-transform;
//   transition-property: width, height, color, transform;
//   -webkit-transition-duration: 0.2s, 0.28s, 0.3s, 0.2;
//   transition-duration: 0.2s, 0.28s, 0.3s, 0.2;
//   -webkit-transition-timing-function: ease, ease-in, ease-out, linear;
//   transition-timing-function: ease, ease-in, ease-out, linear;
//   -webkit-transition-delay: 0.1s, 0.15s, 0.2s, 0.1s;
//   transition-delay: 0.1s, 0.15s, 0.2s, 0.1s;
// }
// ================================================================

// animation
// Value:	<single-animation> [ ‘,’ <single-animation> ]*
// <single-animation> = <single-animation-name> || <time> || <single-animation-timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state>
// http://www.w3.org/TR/css3-animations/#animation-shorthand-property
@mixin animation ($animations...) {
  @include prefixer(animation, $animations);
}
// ==================================Use===========================
// .animation{
//   @include animation(fadeIn .2s ease .1s);
// }
// ===================================Output=========================
// .animation {
//   -webkit-animation: fadeIn 0.2s ease 0.1s;
//   animation: fadeIn 0.2s ease 0.1s;
// }
// =================================================================
// animation-name
// Value:<single-animation-name> [ ‘,’ <single-animation-name> ]*
// http://www.w3.org/TR/css3-animations/#animation-name
@mixin animation-name ($names...) {
  @include prefixer(animation-name, $names);
}
// animation-duration
// Value:<time> [, <time>]*
// http://www.w3.org/TR/css3-animations/#animation-duration
@mixin animation-duration ($times...) {
  @include prefixer(animation-duration, $times);
}
// animation-timing-function
// Value:<single-timing-function> [ ‘,’ <single-timing-function> ]*
// http://www.w3.org/TR/css3-animations/#animation-timing-function
@mixin animation-timing-function ($motions...) {
  @include prefixer(animation-timing-function, $motions);
}
// animation-delay
// Value: <time> [, <time>]*
// http://www.w3.org/TR/css3-animations/#animation-delay
@mixin animation-delay ($times...) {
  @include prefixer(animation-delay, $times);
}
// animation-iteration-count
// Value:	<single-animation-iteration-count> [ ‘,’ <single-animation-iteration-count> ]*
// <single-animation-iteration-count> = infinite | <number>
// http://www.w3.org/TR/css3-animations/#animation-iteration-count
@mixin animation-iteration-count ($values...) {
  @if length($values) >= 1 {
    @include prefixer(animation-iteration-count, $values);
  } @else {
    @include prefixer(animation-iteration-count, infinite);
  }
}
// animation-direction
// Value:	<single-animation-direction> [ ‘,’ <single-animation-direction> ]*
// <single-animation-direction> = normal | reverse | alternate | alternate-reverse
// http://www.w3.org/TR/css3-animations/#animation-direction
@mixin animation-direction ($directions...) {
  @include prefixer(animation-direction, $directions);
}
// animation-fill-mode
// Value:<single-animation-fill-mode> [ ‘,’ <single-animation-fill-mode> ]*
// <single-animation-fill-mode> = none | forwards | backwards | both
// http://www.w3.org/TR/css3-animations/#animation-fill-mode
@mixin animation-fill-mode ($modes...) {
  @if length($modes) >= 1 {
    @include prefixer(animation-fill-mode, $modes);
  } @else {
    @include prefixer(animation-fill-mode, forwards);
  }
}
// animation-play-state
// Value:<single-animation-play-state> [ ‘,’ <single-animation-play-state> ]*
// <single-animation-play-state> = running | paused
// http://www.w3.org/TR/css3-animations/#animation-play-state
@mixin animation-play-state ($states...) {
  @if length($modes) >= 1 {
    @include prefixer(animation-play-state, $states);
  } @else {
    @include prefixer(animation-play-state, paused);
  }
}
// columns
// Value:<‘column-width’> || <‘column-count’>
// http://www.w3.org/TR/css3-multicol/#columns
// http://caniuse.com/#search=columns
@mixin columns($arg) {
  @include prefixer(columns, $arg, webkit moz);
}
// column-count
// Value:<integer> | auto
// http://www.w3.org/TR/css3-multicol/#cc
@mixin column-count($int: auto) {
  @include prefixer(column-count, $int, webkit moz);
}
// column-width
// Value:<length> | auto
// http://www.w3.org/TR/css3-multicol/#column-width
@mixin column-width($length: auto) {
  @include prefixer(column-width, $length, webkit moz);
}
// column-gap
// Value: <length> | normal
//http://www.w3.org/TR/css3-multicol/#column-gap
@mixin column-gap($length: normal) {
  @include prefixer(column-gap, $length, webkit moz);
}
// column-fill
// Value:auto | balance
// http://www.w3.org/TR/css3-multicol/#cf
@mixin column-fill($arg: balance) {
  @include prefixer(columns-fill, $arg, webkit moz);
}
// column-rule
// Value: 	<‘column-rule-width’> || <‘column-rule-style’> || [ <‘column-rule-color’> | transparent ]
// http://www.w3.org/TR/css3-multicol/#column-rule
@mixin column-rule($arg: 1px solid transparent) {
  @include prefixer(column-rule, $arg, webkit moz);
}
// column-rule-color
// Value:<color>
// http://www.w3.org/TR/css3-multicol/#crc
@mixin column-rule-color($color) {
  @include prefixer(column-rule-color, $color, webkit moz);
}
// column-rule-style
// Value:	<border-style>
// <border-style> =  none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid
// http://www.w3.org/TR/css3-multicol/#column-rule-style
@mixin column-rule-style($style: none) {
  @include prefixer(column-rule-style, $style, webkit moz);
}
// column-rule-width
// Value: 	<border-width>
// http://www.w3.org/TR/css3-multicol/#column-rule-width
@mixin column-rule-width ($width: none) {
  @include prefixer(column-rule-width, $width, webkit moz);
}
// column-span
// Value:none | all
// http://www.w3.org/TR/css3-multicol/#column-span
@mixin column-span($arg: none) {
  // none || all
  @include prefixer(column-span, $arg, webkit moz);
}

// Filter
// http://www.w3cplus.com/css3/ten-effects-with-css3-filter
// https://developer.mozilla.org/en-US/docs/Web/CSS/filter

//filter
// Value:filter: <filter-function> [<filter-function>]* | none
// <filter-function> = url() | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia()
@mixin filter($arg){
	@include prefixer(filter,$arg);
}
// =============================Use============================
// .filter{
//   @include filter(grayscale(20%) contrast(2%));
// }
// ===============================Output=========================
// .filter {
//   -webkit-filter: grayscale(20%) contrast(2%);
//   filter: grayscale(20%) contrast(2%);
// }
// =============================================================

//filert-url
// url()仅能用于SVG元素
@mixin filter-url($resSvg){
	@include prefixer(filter,url(unquote($resSvg)));
}
// ==============================Use===========================
// .filter-url{
//   @include filter-url("resources.svg#c1");
// }
// ================================Output========================
// .filter-url {
//   -webkit-filter: url(resources.svg#c1);
//   filter: url(resources.svg#c1);
// }
// ==============================================================
// Apply a gaussian blur to an image in px, em, rem
// @include filter-blur(RADIUS);
@mixin filter-blur($radius) {
	@include prefixer(filter,blur($radius));
}
// Alter the brightness of an image
// Min: 0, Max: n%, Default: 100% (no change at 100%)
// @include filter-brightness(PERCENT);
@mixin filter-brightness($percent: 100%) {
	@include prefixer(filter,brightness($percent));
}
// Increase or decrease the contrast of an image.
// Min: 0, Max: n%, Default: 100% (no change at 100%)
// @include filter-contrast(PERCENT);
@mixin filter-contrast($percent: 100%) {
	@include prefixer(filter,contrast($percent));
}
// Add drop shadow for an image
// value: <offset-x> <offset-y> | <blur-radius> | <spread-radius> | <color> 
// @include filter-drop-shadow($dropShadow...)
@mixin filter-drop-shadow($dropShadow...){
	@include prefixer(filter,drop-shadow($dropShadow));
}
// Change the grayscale of an image
// Min: 0, Max: 100%, Default: 0 (full color at 0)
// @include filter-grayscale(PERCENTAGE);
@mixin filter-grayscale($percent) {
	@include prefixer(filter,grayscale($percent));
}
// Rotate the hue of an image
// @include filter-hue-rotate(INT);
@mixin filter-hue-rotate($rotate) {
	@include prefixer(filter,hue-rotate($rotate));
}
// Invert the colors of an image
// Min: 0, Max: 100%, Default: 0 (no change at 0)
// @include filter-invert(PERCENT);
@mixin filter-invert($percent: 0) {
	@include prefixer(filter,invert($percent));
}
// Increase or decrease the color saturation of an image.
// Min: 0, Max: n%, Default: 100% (no change at 100%)
// @include filter-saturate(PERCENT);
@mixin filter-saturate($percent: 100%) {
	@include prefixer(filter,saturate($percent));
}
// Apply a sepia filter
// Min: 0, Max: 100%, Default: 0 (full color, no sepia at 0)
// @include filter-sepia(PERCENT);
@mixin filter-sepia($percent) {
	@include prefixer(filter,sepia($percent));
}
// Apply a opacity filter
// Min:0,Max:100%, Default:0 
// @include filter-opacity(PERCENT)
@mixin filter-opacity($percent){
	@include prefixer(filter,opacity($percent));
}
// =================================Use===============================
// .filter-blur{
//   @include filter-blur(20px);
// }
// .filter-brightness{
//   @include filter-brightness(20%);
// }
// .filter-drop-shadow{
//   @include filter-drop-shadow(10px 10px 20px #ffe4c4);
// }
// .filter-grayscale{
//   @include filter-grayscale(100%);
// }
// .filter-hue-rotate{
//   @include filter-hue-rotate(30deg);
// }
// .filter-invert{
//   @include filter-invert(100%);
// }
// .filter-saturate{
//   @include filter-saturate(30%);
// }
// .filter-sepia{
//   @include filter-sepia(20%);
// }
// .filter-opacity{
//   @include filter-opacity(30%);
// }
// =================================Output=============================
// .filter-blur {
//   -webkit-filter: blur(20px);
//   filter: blur(20px);
// }

// .filter-brightness {
//   -webkit-filter: brightness(20%);
//   filter: brightness(20%);
// }

// .filter-drop-shadow {
//   -webkit-filter: drop-shadow(10px 10px 20px #ffe4c4);
//   filter: drop-shadow(10px 10px 20px #ffe4c4);
// }

// .filter-grayscale {
//   -webkit-filter: grayscale(100%);
//   filter: grayscale(100%);
// }

// .filter-hue-rotate {
//   -webkit-filter: hue-rotate(30deg);
//   filter: hue-rotate(30deg);
// }

// .filter-invert {
//   -webkit-filter: invert(100%);
//   filter: invert(100%);
// }

// .filter-saturate {
//   -webkit-filter: saturate(30%);
//   filter: saturate(30%);
// }

// .filter-sepia {
//   -webkit-filter: sepia(20%);
//   filter: sepia(20%);
// }

// .filter-opacity {
//   -webkit-filter: opacity(30%);
//   filter: opacity(30%);
// }
// ===============================================================
